// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package view

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func mainScript() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_mainScript_5cb4`,
		Function: `function __templ_mainScript_5cb4(){let removeListeners = [];

	window.onRemove = function (node, callback) {
		removeListeners.push({
			node: node,
			callback: callback
		});
	}

	var observer = new MutationObserver(function(mutations) {
		mutations.forEach(function(mutation) {
			var nodes = Array.from(mutation.removedNodes);

			nodes.forEach(removedNode => {
				for (var i = 0; i < removeListeners.length; ++i) {
					if (removedNode.contains(removeListeners[i].node)) {
						removeListeners[i].callback();
						removeListeners.splice(i, 1);
						--i;
					}
				}
			});
		});
	});

	observer.observe(document.body, {
		childList: true,
		subtree: true
	});

	var lastNode = null;

	function updateCaret(input) {
		const index = input.selectionStart;
		if (index != input.selectionEnd)
			return;

		const holder = me(".caret-holder", input.parentElement);
		holder.innerHTML =
			input.value.substring(0, index)+
			"<span class='bg-fg'>&nbsp;</span>"+
			input.value.substring(index);
		holder.styles({ left: (-input.scrollLeft).toString(), top: (-input.scrollTop).toString() });
	}

	document.addEventListener("selectionchange", function (e) {
		any(".caret-holder").run(e => {
			e.innerHTML = "";
		});

		if (e.target.nodeName == "INPUT" || e.target.nodeName == "TEXTAREA")
			updateCaret(e.target);
	});

	document.addEventListener("keydown", function (e) {
		setTimeout(() => {
			if (e.target.nodeName == "INPUT" || e.target.nodeName == "TEXTAREA")
				updateCaret(e.target);
		}, 0);
	});
}`,
		Call:       templ.SafeScript(`__templ_mainScript_5cb4`),
		CallInline: templ.SafeScriptInline(`__templ_mainScript_5cb4`),
	}
}

func Layout(content templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.WriteWatchModeString(templ_7745c5c3_Buffer, 1)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, mainScript())
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.WriteWatchModeString(templ_7745c5c3_Buffer, 2)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 templ.ComponentScript = mainScript()
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.WriteWatchModeString(templ_7745c5c3_Buffer, 3)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.WriteWatchModeString(templ_7745c5c3_Buffer, 4)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
